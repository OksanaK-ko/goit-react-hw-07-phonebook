{"version":3,"sources":["сomponents/ContactForm/ContactForm.module.css","сomponents/ContactList/ContactList.module.css","сomponents/Filter/Filter.module.css","сomponents/Alert/Alert.module.css","сomponents/App/App.module.css","redux/contacts/contacts-actions.js","redux/contacts/contacts-operations.js","redux/contacts/contacts-selectors.js","сomponents/Alert/Alert.js","сomponents/ContactForm/ContactForm.jsx","сomponents/ContactList/ContactList.jsx","сomponents/Filter/Filter.jsx","сomponents/App/App.js","redux/contacts/contacts-reducer.js","redux/contacts/store.js","index.js"],"names":["module","exports","fetchContactRequest","createAction","fetchContactSuccess","fetchContactError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","changeFilter","axios","defaults","baseURL","dispatch","get","then","data","catch","error","name","number","contact","post","contactId","delete","getFilter","state","contacts","filter","getLoading","loading","getVisibleContacts","createSelector","items","normalizedFilter","toLowerCase","includes","Alert","className","s","alertBox","alert","ContactForm","handleChange","e","currentTarget","value","setState","handleSubmit","preventDefault","props","find","item","elements","setTimeout","onSubmit","reset","CSSTransition","in","this","appear","classNames","timeout","unmountOnExit","form","label","htmlFor","nameInputId","input","type","onChange","id","numberInputId","button","isLoadingContacts","Component","defaultProps","connect","contactsSelectors","contactsOperations","onDeleteContact","TransitionGroup","component","ContactList","map","ContactList_item","onClick","onChangeFilter","target","fetchContacts","container","title","createReducer","_","payload","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","contactsReducer","devTools","process","console","log","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.75735cfe.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"ContactForm_label__1h0iW\",\"form\":\"ContactForm_form__1thOW\",\"input\":\"ContactForm_input__BERH-\",\"button\":\"ContactForm_button__3iCfN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactList\":\"ContactList_ContactList__1Cc0V\",\"ContactList_item\":\"ContactList_ContactList_item__1rM8A\",\"button\":\"ContactList_button__1En4n\",\"enter\":\"ContactList_enter__LZYKs\",\"enterActive\":\"ContactList_enterActive__226R1\",\"exit\":\"ContactList_exit__2r7b7\",\"exitActive\":\"ContactList_exitActive__2ol61\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__H9goy\",\"input\":\"Filter_input__R6ejL\",\"form\":\"Filter_form__mwAuz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"alertBox\":\"Alert_alertBox__l-J3z\",\"alert\":\"Alert_alert__2bNvE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__8Ir90\",\"title\":\"App_title__36e2f\"};","// import shortid from 'shortid';\r\nimport { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const fetchContactRequest = createAction('contacts/fetchContactRequest');\r\nexport const fetchContactSuccess = createAction('contacts/fetchContactSuccess');\r\nexport const fetchContactError = createAction('contacts/fetchContactError');\r\n\r\nexport const addContactRequest = createAction('contacts/addContactRequest');\r\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\r\nexport const addContactError = createAction('contacts/addContactError');\r\n\r\nexport const deleteContactRequest = createAction(\r\n  'contacts/deleteContactRequest',\r\n);\r\nexport const deleteContactSuccess = createAction(\r\n  'contacts/deleteContactSuccess',\r\n);\r\nexport const deleteContactError = createAction('contacts/deleteContactError');\r\n\r\nexport const changeFilter = createAction('contacts/changeFilter');\r\n","import axios from 'axios';\r\nimport {\r\n  fetchContactRequest,\r\n  fetchContactSuccess,\r\n  fetchContactError,\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n} from './contacts-actions';\r\n\r\naxios.defaults.baseURL = 'http://localhost:3000';\r\n\r\nconst fetchContact = () => dispatch => {\r\n  dispatch(fetchContactRequest());\r\n  axios\r\n    .get('/contacts')\r\n    .then(({ data }) => dispatch(fetchContactSuccess(data)))\r\n    .catch(error => dispatch(fetchContactError(error)));\r\n};\r\n\r\nconst addContact = ({ name, number }) => dispatch => {\r\n  const contact = {\r\n    name,\r\n    number,\r\n  };\r\n\r\n  dispatch(addContactRequest());\r\n  axios\r\n    .post('/contacts', contact)\r\n    .then(({ data }) => dispatch(addContactSuccess(data)))\r\n    .catch(error => dispatch(addContactError(error)));\r\n};\r\n\r\nconst deleteContact = contactId => dispatch => {\r\n  dispatch(deleteContactRequest());\r\n  axios\r\n    .delete(`/contacts/${contactId}`)\r\n    .then(() => dispatch(deleteContactSuccess(contactId)))\r\n    .catch(error => dispatch(deleteContactError(error)));\r\n};\r\n\r\nexport default {\r\n  fetchContact,\r\n  addContact,\r\n  deleteContact,\r\n};\r\n","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nconst getLoading = state => state.contacts.loading;\r\n\r\nconst getFilter = state => state.contacts.filter;\r\n\r\nconst getAllContacts = state => state.contacts.items;\r\n\r\nconst getVisibleContacts = createSelector(\r\n  [getAllContacts, getFilter],\r\n  (contacts, filter) => {\r\n    const normalizedFilter = filter.toLowerCase();\r\n\r\n    return contacts.filter(({ name }) =>\r\n      name.toLowerCase().includes(normalizedFilter),\r\n    );\r\n  },\r\n);\r\n\r\nexport default {\r\n  getLoading,\r\n  getFilter,\r\n  getVisibleContacts,\r\n};\r\n\r\n// const getVisibleContacts = state => {\r\n//   const contacts = getAllContacts(state);\r\n//   const filter = getFilter(state);\r\n//   const normalizedFilter = filter.toLowerCase();\r\n\r\n//   return contacts.filter(({ name }) =>\r\n//     name.toLowerCase().includes(normalizedFilter),\r\n//   );\r\n// };\r\n","import React from 'react';\r\nimport s from './Alert.module.css';\r\n\r\nconst Alert = () => (\r\n  <div className={s.alertBox}>\r\n    <h2 className={s.alert}>Contact already exists!</h2>\r\n  </div>\r\n);\r\n\r\nexport default Alert;\r\n","import React, { Component } from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n// import shortid from 'shortid'\r\nimport { contactsOperations, contactsSelectors } from '../../redux/contacts';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport Alert from '../Alert/Alert';\r\nimport '../../css/animation.css';\r\nimport s from './ContactForm.module.css'\r\n\r\nclass ContactForm extends Component {\r\n    state = {\r\n    name: \"\",\r\n    number: \"\",\r\n    error: false\r\n    }\r\n\r\n    // nameInputId = shortid.generate();\r\n    // numberInputId = shortid.generate();\r\n\r\n    handleChange = (e) => {\r\n    const { name, value } = e.currentTarget;\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n    };\r\n    \r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        const { contacts } = this.props;\r\n        if (contacts.find(item => item.name.toLowerCase() === e.currentTarget.elements[0].value.toLowerCase() )) {\r\n            this.setState(() => {\r\n                return {\r\n                    error: true,\r\n                };\r\n            });\r\n\r\n            setTimeout(() => {\r\n                this.setState(() => {\r\n                    return {\r\n                        error: false,\r\n                    };\r\n                });\r\n            }, 1500);\r\n            return;\r\n        }\r\n        this.props.onSubmit(this.state);\r\n        this.reset();\r\n    }\r\n    reset = () => {\r\n        this.setState({ name: \"\", number: \"\" })\r\n    }\r\n      render() {\r\n          return (\r\n              <div>\r\n        <CSSTransition\r\n                    in={this.state.error}\r\n                    appear={true}\r\n                    classNames=\"error\"\r\n                    timeout={250}\r\n                    unmountOnExit\r\n                    >\r\n          <Alert />\r\n        </CSSTransition> \r\n                      < form onSubmit={this.handleSubmit} >\r\n                         <div className={s.form}>\r\n                              <label className={s.label} htmlFor={this.nameInputId}>\r\n                                  Name\r\n              <input className={s.input}\r\n                                      type=\"text\"\r\n                                      name=\"name\"\r\n                                      value={this.state.name}\r\n                                      onChange={this.handleChange}\r\n                                      id={this.nameInputId}\r\n                                  />\r\n                              </label>\r\n                              <label className={s.label} htmlFor={this.numberInputId}>\r\n                                  Number\r\n              <input className={s.input}\r\n                                      type=\"text\"\r\n                                      name=\"number\"\r\n                                      value={this.state.number}\r\n                                      onChange={this.handleChange}\r\n                                      id={this.numberInputId}\r\n                                  />\r\n                              </label>\r\n                              <button className={s.button} type=\"submit\">Add contact</button>\r\n                        {this.props.isLoadingContacts && <h1>Loading...</h1>}    \r\n                      </div>\r\n                      </form >\r\n                  </div>\r\n                \r\n        );\r\n    }\r\n}\r\n\r\nContactForm.defaultProps = {\r\n    type: 'text',\r\n    name: null,\r\n};\r\n\r\nContactForm.propTypes = {\r\n    type: PropTypes.string,\r\n    name: PropTypes.string,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    contacts: contactsSelectors.getVisibleContacts(state),\r\n       isLoadingContacts: contactsSelectors.getLoading(state)\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onSubmit: data => dispatch(contactsOperations.addContact(data))\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\r\n\r\n\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport {contactsOperations, contactsSelectors} from '../../redux/contacts';\r\nimport s from './ContactList.module.css'\r\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\r\n\r\nconst ContactList = ({ contacts, onDeleteContact }) => (\r\n    <TransitionGroup component='ul' className={s.ContactList}>\r\n    {contacts.map(({ id, name, number }) =>\r\n      <CSSTransition key={id} timeout={250}\r\n      classNames={s}>\r\n                <li className={s.ContactList_item} >\r\n                {name}: {number}\r\n                <button className={s.button} onClick={() => onDeleteContact(id)}>Delete</button>\r\n        </li>\r\n             </CSSTransition>)}\r\n            </TransitionGroup>\r\n    \r\n        )\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    }).isRequired,\r\n  ),\r\n  onDeleteContact: PropTypes.func,\r\n};\r\n\r\n\r\nconst mapStateToProps = (state) => ({\r\n  contacts: contactsSelectors.getVisibleContacts(state)  \r\n})\r\n\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onDeleteContact: (id) => dispatch(contactsOperations\r\n    \r\n    .deleteContact(id))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport {contactsSelectors, changeFilter} from '../../redux/contacts';\r\nimport s from './Filter.module.css';\r\n\r\nconst Filter = ({ value, onChangeFilter}) => {\r\n  return (\r\n    <div className={s.form}>\r\n          <label className={s.label} >\r\n            Find contacts by name\r\n            <input className={s.input}\r\n              type=\"text\"\r\n              value={value}\r\n              onChange={onChangeFilter}\r\n            ></input>\r\n      </label>\r\n      </div>\r\n     )\r\n}\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string.isRequired,\r\n  onChangeFilter: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToPtops = (state) => ({\r\n  value: contactsSelectors.getFilter(state),\r\n\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onChangeFilter: (e) => dispatch(changeFilter(e.target.value))\r\n})\r\n\r\nexport default connect(mapStateToPtops,mapDispatchToProps)(Filter);","import React from 'react';\nimport ContactForm from '../ContactForm/ContactForm';\nimport ContactList from '../ContactList/ContactList';\nimport Filter from '../Filter/Filter';\nimport { connect } from 'react-redux';\nimport { contactsOperations } from '../../redux/contacts';\nimport s from './App.module.css';\nimport { CSSTransition } from 'react-transition-group';\nimport '../../css/animation.css';\n\nconst App = () => (\n  <div className={s.container}>\n    <CSSTransition in={true} appear={true} classNames=\"fade\" timeout={500}>\n      <h1 className={s.title}>Phonebook</h1>\n    </CSSTransition>\n    <ContactForm />\n\n    <CSSTransition in={true} classNames=\"fade\" timeout={500} unmountOnExit>\n      <Filter />\n    </CSSTransition>\n\n    <CSSTransition in={true} classNames=\"fade\" timeout={250} unmountOnExit>\n      <ContactList />\n    </CSSTransition>\n  </div>\n);\n\nconst mapDispatchToProps = dispatch => ({\n  fetchContacts: () => dispatch(contactsOperations.fetchContact()),\n});\n\nexport default connect(null, mapDispatchToProps)(App);\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport {\r\n  fetchContactRequest,\r\n  fetchContactSuccess,\r\n  fetchContactError,\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  changeFilter,\r\n} from './contacts-actions';\r\n\r\nconst items = createReducer([], {\r\n  [fetchContactSuccess]: (_, { payload }) => payload,\r\n  [addContactSuccess]: (state, { payload }) => [...state, payload],\r\n  [deleteContactSuccess]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst loading = createReducer(false, {\r\n  [addContactRequest]: () => true,\r\n  [addContactSuccess]: () => false,\r\n  [addContactError]: () => false,\r\n  [deleteContactRequest]: () => true,\r\n  [deleteContactSuccess]: () => false,\r\n  [deleteContactError]: () => false,\r\n  [fetchContactRequest]: () => true,\r\n  [fetchContactSuccess]: () => false,\r\n  [fetchContactError]: () => false,\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nconst error = createReducer(null, {});\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n  loading,\r\n  error,\r\n});\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\nimport {\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport contactsReducer from './contacts-reducer';\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: contactsReducer,\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\n// const persistor = persistStore(store);\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n// import { PersistGate } from 'redux-persist/integration/react';\nimport App from './сomponents/App/App';\nimport store from './redux/contacts/store';\nimport './index.css';\n\nconsole.log(store);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* <PersistGate loading={null} persistor={store.persistor}> */}\n      <App />\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}